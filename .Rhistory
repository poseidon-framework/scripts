i <- 215
stop <- start <- rep(NA, length(simple_age_split))
# no age info
if (is.na(simple_age_split[[i]][1]) | simple_age_split[[i]][1] == "n/a") {
start[i] <- NA
stop[i] <- NA
next
}
start
# no range: only one value e.g. 5000 BCE
if (length(simple_age_split[[i]]) == 2) {
if (simple_age_split[[i]][2] == "BCE" |
(simple_age_split[[i]][2] == "cal" & simple_age_split[[i]][2] == "BCE")) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- -as.numeric(simple_age_split[[i]][1])
next
}
if (simple_age_split[[i]][2] == "CE" |
(simple_age_split[[i]][2] == "cal" & simple_age_split[[i]][2] == "CE")) {
start[i] <- as.numeric(simple_age_split[[i]][1])
stop[i] <- as.numeric(simple_age_split[[i]][1])
next
}
if (all(grepl("^[0-9]+$", simple_age_split[[i]]))) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- -as.numeric(simple_age_split[[i]][2])
next
}
}
# normal range 5000-4700 BCE
if (simple_age_split[[i]][3] %in% c("BCE", "calBCE") |
(simple_age_split[[i]][3] == "cal" & simple_age_split[[i]][4] == "BCE")) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- -as.numeric(simple_age_split[[i]][2])
next
}
split_age_string <- function(x) {
# construct result table
res <- tibble::tibble(
x = x,
Date_C14_Labnr = rep(NA, length(x)),
Date_C14_Uncal_BP = NA,
Date_C14_Uncal_BP_Err = NA,
Date_BC_AD_Start = NA,
Date_BC_AD_Stop = NA,
Date_Type = NA
)
# determine type of date info
none_ids <- which(is.na(x))
present_ids <- grep("present", x)
c14_age_ids <- grep("±", x)
res$Date_Type[c14_age_ids] <- "C14"
res$Date_Type[-c14_age_ids] <- "contextual"
res$Date_Type[present_ids] <- "modern"
res$Date_Type[none_ids] <- "none"
# parse uncalibrated c14 age info
res$Date_C14_Labnr[c14_age_ids] <- stringr::str_extract_all(
x[c14_age_ids], paste(
c(
"CNA-?[0-9]*",
# "AAR-\\s[0-9]*",
# "OxA-X-[0-9]*-[0-9]*",
# "CIRCE-DSH-[0-9]*",
# "ISGS-A[0-9]*",
# "CEDAD-LTL[0-9]*A",
"[A-Za-z]{2,7}-[0-9]*"
),
collapse = "|"
)
) %>% sapply(., function(y) { paste(y, collapse = ";") } )
uncal_dates <- stringr::str_extract_all(x[c14_age_ids], "[0-9]{1,5}\u00B1[0-9]{1,4}")
res$Date_C14_Uncal_BP[c14_age_ids] <- sapply(uncal_dates, function(z) {
sapply(strsplit(z, "\u00B1"), function(a) { a[1] } ) %>%
paste(collapse = ";")
} )
res$Date_C14_Uncal_BP_Err[c14_age_ids] <- sapply(uncal_dates, function(z) {
sapply(strsplit(z, "\u00B1"), function(a) { a[2] } ) %>%
paste(collapse = ";")
} )
# parse simplified start and stop age
simple_age_split <- x %>% strsplit("–|\\s+") %>% lapply(function(y) {y[y != ""]})
stop <- start <- rep(NA, length(simple_age_split))
for (i in 1:length(simple_age_split)) {
# no age info
if (is.na(simple_age_split[[i]][1]) | simple_age_split[[i]][1] == "n/a") {
start[i] <- NA
stop[i] <- NA
next
}
# no range: only one value e.g. 5000 BCE
if (length(simple_age_split[[i]]) == 2) {
if (simple_age_split[[i]][2] == "BCE" |
(simple_age_split[[i]][2] == "cal" & simple_age_split[[i]][2] == "BCE")) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- -as.numeric(simple_age_split[[i]][1])
next
}
if (simple_age_split[[i]][2] == "CE" |
(simple_age_split[[i]][2] == "cal" & simple_age_split[[i]][2] == "CE")) {
start[i] <- as.numeric(simple_age_split[[i]][1])
stop[i] <- as.numeric(simple_age_split[[i]][1])
next
}
if (all(grepl("^[0-9]+$", simple_age_split[[i]]))) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- -as.numeric(simple_age_split[[i]][2])
next
}
}
# normal range 5000-4700 BCE
if (simple_age_split[[i]][3] %in% c("BCE", "calBCE") |
(simple_age_split[[i]][3] == "cal" & simple_age_split[[i]][4] == "BCE")) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- -as.numeric(simple_age_split[[i]][2])
next
}
if (simple_age_split[[i]][3] %in% c("CE", "calCE") |
(simple_age_split[[i]][3] == "cal" & simple_age_split[[i]][4] == "CE")) {
start[i] <- as.numeric(simple_age_split[[i]][1])
stop[i] <- as.numeric(simple_age_split[[i]][2])
next
}
if (simple_age_split[[i]][2] %in% c("BCE", "calBCE") &
simple_age_split[[i]][4] %in% c("CE", "calCE")) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- as.numeric(simple_age_split[[i]][3])
next
}
}
res$Date_BC_AD_Start <- start
res$Date_BC_AD_Stop <- stop
# replace all empty values with NA
res[res == ""] <- NA
return(res)
}
split_age_string(olalde_poseidon$Date_BC_AD_Median.paper) %>% View()
res <- split_age_string(olalde_poseidon$Date_BC_AD_Median.paper)
res <- split_age_string(olalde_poseidon$Date_BC_AD_Median.paper)
readr::write_tsv(res, "~/agora/published_data/2019_Olalde_Iberia/dating.tsv")
res <- split_age_string(olalde_poseidon$Date_BC_AD_Median.paper)
res$Date_C14_Uncal_BP
Map(\(x) strsplit(x, ";"), res$Date_C14_Uncal_BP)
strsplit(res$Date_C14_Uncal_BP, ";")
Map(as.numeric, strsplit(res$Date_C14_Uncal_BP, ";"))
res
poseidonR::quickcalibrate(
Map(as.numeric, strsplit(res$Date_C14_Uncal_BP, ";")),
Map(as.numeric, strsplit(res$Date_C14_Uncal_BP_Err, ";"))
)
Map(as.numeric, strsplit(res$Date_C14_Uncal_BP_Err, ";"))
poseidonR::quickcalibrate(
Map(as.numeric, strsplit(res$Date_C14_Uncal_BP, ";")),
Map(as.numeric, strsplit(res$Date_C14_Uncal_BP_Err, ";"))
)
split_age_string <- function(x) {
# construct result table
res <- tibble::tibble(
x = x,
Date_C14_Labnr = rep(NA, length(x)),
Date_C14_Uncal_BP = NA,
Date_C14_Uncal_BP_Err = NA,
Date_BC_AD_Start = NA,
Date_BC_AD_Stop = NA,
Date_Type = NA
)
# determine type of date info
none_ids <- which(is.na(x))
present_ids <- grep("present", x)
c14_age_ids <- grep("±", x)
res$Date_Type[c14_age_ids] <- "C14"
res$Date_Type[-c14_age_ids] <- "contextual"
res$Date_Type[present_ids] <- "modern"
res$Date_Type[none_ids] <- "none"
# parse uncalibrated c14 age info
res$Date_C14_Labnr[c14_age_ids] <- stringr::str_extract_all(
x[c14_age_ids], paste(
c(
"CNA-?[0-9]*",
# "AAR-\\s[0-9]*",
# "OxA-X-[0-9]*-[0-9]*",
# "CIRCE-DSH-[0-9]*",
# "ISGS-A[0-9]*",
# "CEDAD-LTL[0-9]*A",
"[A-Za-z]{2,7}-[0-9]*"
),
collapse = "|"
)
) %>% sapply(., function(y) { paste(y, collapse = ";") } )
uncal_dates <- stringr::str_extract_all(x[c14_age_ids], "[0-9]{1,5}\u00B1[0-9]{1,4}")
res$Date_C14_Uncal_BP[c14_age_ids] <- sapply(uncal_dates, function(z) {
sapply(strsplit(z, "\u00B1"), function(a) { a[1] } ) %>%
paste(collapse = ";")
} )
res$Date_C14_Uncal_BP_Err[c14_age_ids] <- sapply(uncal_dates, function(z) {
sapply(strsplit(z, "\u00B1"), function(a) { a[2] } ) %>%
paste(collapse = ";")
} )
# parse simplified start and stop age
simple_age_split <- x %>% strsplit("–|\\s+") %>% lapply(function(y) {y[y != ""]})
stop <- start <- rep(NA, length(simple_age_split))
for (i in 1:length(simple_age_split)) {
# no age info
if (is.na(simple_age_split[[i]][1]) | simple_age_split[[i]][1] == "n/a") {
start[i] <- NA
stop[i] <- NA
next
}
# no range: only one value e.g. 5000 BCE
if (length(simple_age_split[[i]]) == 2) {
if (simple_age_split[[i]][2] == "BCE" |
(simple_age_split[[i]][2] == "cal" & simple_age_split[[i]][2] == "BCE")) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- -as.numeric(simple_age_split[[i]][1])
next
}
if (simple_age_split[[i]][2] == "CE" |
(simple_age_split[[i]][2] == "cal" & simple_age_split[[i]][2] == "CE")) {
start[i] <- as.numeric(simple_age_split[[i]][1])
stop[i] <- as.numeric(simple_age_split[[i]][1])
next
}
if (all(grepl("^[0-9]+$", simple_age_split[[i]]))) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- -as.numeric(simple_age_split[[i]][2])
next
}
}
# normal range 5000-4700 BCE
if (simple_age_split[[i]][2] == "cal" &
simple_age_split[[i]][3] == "BCE" &
simple_age_split[[i]][5] == "cal" &
simple_age_split[[i]][6] == "CE") {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- as.numeric(simple_age_split[[i]][4])
next
}
if (simple_age_split[[i]][3] %in% c("BCE", "calBCE") |
(simple_age_split[[i]][3] == "cal" & simple_age_split[[i]][4] == "BCE")) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- -as.numeric(simple_age_split[[i]][2])
next
}
if (simple_age_split[[i]][3] %in% c("CE", "calCE") |
(simple_age_split[[i]][3] == "cal" & simple_age_split[[i]][4] == "CE")) {
start[i] <- as.numeric(simple_age_split[[i]][1])
stop[i] <- as.numeric(simple_age_split[[i]][2])
next
}
if (simple_age_split[[i]][2] %in% c("BCE", "calBCE") &
simple_age_split[[i]][4] %in% c("CE", "calCE")) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- as.numeric(simple_age_split[[i]][3])
next
}
}
res$Date_BC_AD_Start <- start
res$Date_BC_AD_Stop <- stop
# replace all empty values with NA
res[res == ""] <- NA
return(res)
}
res <- split_age_string(olalde_poseidon$Date_BC_AD_Median.paper)
res
res %>% View()
poseidonR::quickcalibrate(
Map(as.numeric, strsplit(res$Date_C14_Uncal_BP, ";")),
Map(as.numeric, strsplit(res$Date_C14_Uncal_BP_Err, ";"))
)
library(poseidonR)
detach("package:poseidonR", unload = TRUE)
poseidonR::quickcalibrate(
Map(as.numeric, strsplit(res$Date_C14_Uncal_BP, ";")),
Map(as.numeric, strsplit(res$Date_C14_Uncal_BP_Err, ";"))
)
library(magrittr)
olalde_poseidon <- readr::read_tsv(
"~/agora/published_data/2019_Olalde_Iberia/Olalde_Iberia.janno",
col_types = readr::cols(.default = readr::col_character())
)
res <- split_age_string(olalde_poseidon$Date_BC_AD_Median.paper)
split_age_string <- function(x) {
# construct result table
res <- tibble::tibble(
x = x,
Date_C14_Labnr = rep(NA, length(x)),
Date_C14_Uncal_BP = NA,
Date_C14_Uncal_BP_Err = NA,
Date_BC_AD_Start = NA,
Date_BC_AD_Stop = NA,
Date_Type = NA
)
# determine type of date info
none_ids <- which(is.na(x))
present_ids <- grep("present", x)
c14_age_ids <- grep("±", x)
res$Date_Type[c14_age_ids] <- "C14"
res$Date_Type[-c14_age_ids] <- "contextual"
res$Date_Type[present_ids] <- "modern"
res$Date_Type[none_ids] <- "none"
# parse uncalibrated c14 age info
res$Date_C14_Labnr[c14_age_ids] <- stringr::str_extract_all(
x[c14_age_ids], paste(
c(
"CNA-?[0-9]*",
# "AAR-\\s[0-9]*",
# "OxA-X-[0-9]*-[0-9]*",
# "CIRCE-DSH-[0-9]*",
# "ISGS-A[0-9]*",
# "CEDAD-LTL[0-9]*A",
"[A-Za-z]{2,7}-[0-9]*"
),
collapse = "|"
)
) %>% sapply(., function(y) { paste(y, collapse = ";") } )
uncal_dates <- stringr::str_extract_all(x[c14_age_ids], "[0-9]{1,5}\u00B1[0-9]{1,4}")
res$Date_C14_Uncal_BP[c14_age_ids] <- sapply(uncal_dates, function(z) {
sapply(strsplit(z, "\u00B1"), function(a) { a[1] } ) %>%
paste(collapse = ";")
} )
res$Date_C14_Uncal_BP_Err[c14_age_ids] <- sapply(uncal_dates, function(z) {
sapply(strsplit(z, "\u00B1"), function(a) { a[2] } ) %>%
paste(collapse = ";")
} )
# parse simplified start and stop age
simple_age_split <- x %>% strsplit("–|\\s+") %>% lapply(function(y) {y[y != ""]})
stop <- start <- rep(NA, length(simple_age_split))
for (i in 1:length(simple_age_split)) {
# no age info
if (is.na(simple_age_split[[i]][1]) | simple_age_split[[i]][1] == "n/a") {
start[i] <- NA
stop[i] <- NA
next
}
# no range: only one value e.g. 5000 BCE
if (length(simple_age_split[[i]]) == 2) {
if (simple_age_split[[i]][2] == "BCE" |
(simple_age_split[[i]][2] == "cal" & simple_age_split[[i]][2] == "BCE")) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- -as.numeric(simple_age_split[[i]][1])
next
}
if (simple_age_split[[i]][2] == "CE" |
(simple_age_split[[i]][2] == "cal" & simple_age_split[[i]][2] == "CE")) {
start[i] <- as.numeric(simple_age_split[[i]][1])
stop[i] <- as.numeric(simple_age_split[[i]][1])
next
}
if (all(grepl("^[0-9]+$", simple_age_split[[i]]))) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- -as.numeric(simple_age_split[[i]][2])
next
}
}
# normal range 5000-4700 BCE
if (simple_age_split[[i]][2] == "cal" &
simple_age_split[[i]][3] == "BCE" &
simple_age_split[[i]][5] == "cal" &
simple_age_split[[i]][6] == "CE") {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- as.numeric(simple_age_split[[i]][4])
next
}
if (simple_age_split[[i]][3] %in% c("BCE", "calBCE") |
(simple_age_split[[i]][3] == "cal" & simple_age_split[[i]][4] == "BCE")) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- -as.numeric(simple_age_split[[i]][2])
next
}
if (simple_age_split[[i]][3] %in% c("CE", "calCE") |
(simple_age_split[[i]][3] == "cal" & simple_age_split[[i]][4] == "CE")) {
start[i] <- as.numeric(simple_age_split[[i]][1])
stop[i] <- as.numeric(simple_age_split[[i]][2])
next
}
if (simple_age_split[[i]][2] %in% c("BCE", "calBCE") &
simple_age_split[[i]][4] %in% c("CE", "calCE")) {
start[i] <- -as.numeric(simple_age_split[[i]][1])
stop[i] <- as.numeric(simple_age_split[[i]][3])
next
}
}
res$Date_BC_AD_Start <- start
res$Date_BC_AD_Stop <- stop
# replace all empty values with NA
res[res == ""] <- NA
return(res)
}
res <- split_age_string(olalde_poseidon$Date_BC_AD_Median.paper)
poseidonR::quickcalibrate(
Map(as.numeric, strsplit(res$Date_C14_Uncal_BP, ";")),
Map(as.numeric, strsplit(res$Date_C14_Uncal_BP_Err, ";"))
)
res
age_string_split <- split_age_string(olalde_poseidon$Date_BC_AD_Median.paper)
cal_res <- poseidonR::quickcalibrate(
Map(as.numeric, strsplit(age_string_split$Date_C14_Uncal_BP, ";")),
Map(as.numeric, strsplit(age_string_split$Date_C14_Uncal_BP_Err, ";"))
)
cal_res
head(cal_res)
head(age_string_split)
cal_res
cbind(
age_string_split[2:4],
cal_res
)
res <- cbind(
age_string_split[2:4],
cal_res
)
readr::write_tsv(res, "~/agora/published_data/2019_Olalde_Iberia/dating.tsv")
readr::write_tsv(res, "~/agora/published_data/2019_Olalde_Iberia/dating.tsv", na = "n/a")
age_string_split
cal_res
res <- cbind(
age_string_split[2:4],
cal_res[1],
age_string_split[5:7]
)
res
res[res$Date_Type == "contextual",]
res
res$Date_BC_AD_Start[res$Date_Type == "contextual",] <- cal_res$Date_BC_AD_Start
res$Date_BC_AD_Start[res$Date_Type == "contextual",] <- cal_res$Date_BC_AD_Start[res$Date_Type == "contextual",]
res$Date_BC_AD_Start[res$Date_Type == "contextual"] <- cal_res$Date_BC_AD_Start[res$Date_Type == "contextual"]
res
res$Date_BC_AD_Stop[res$Date_Type == "contextual"] <- cal_res$Date_BC_AD_Stop[res$Date_Type == "contextual"]
readr::write_tsv(res, "~/agora/published_data/2019_Olalde_Iberia/dating.tsv", na = "n/a")
res
res <- cbind(
age_string_split[2:4],
cal_res[1],
age_string_split[5:7]
)
res$Date_BC_AD_Start[res$Date_Type == "C14"] <- cal_res$Date_BC_AD_Start[res$Date_Type == "C14"]
res$Date_BC_AD_Stop[res$Date_Type == "C14"] <- cal_res$Date_BC_AD_Stop[res$Date_Type == "C14"]
res
readr::write_tsv(res, "~/agora/published_data/2019_Olalde_Iberia/dating.tsv", na = "n/a")
purrr::map2_int(
res$Date_BC_AD_Start[res$Date_Type == "contextual"],
res$Date_BC_AD_Stop[res$Date_Type == "contextual"]
function(x, y) { mean(x, y) }
)
purrr::map2_int(
res$Date_BC_AD_Start[res$Date_Type == "contextual"],
res$Date_BC_AD_Stop[res$Date_Type == "contextual"],
function(x, y) { mean(x, y) }
)
purrr::map2_int(
res$Date_BC_AD_Start[res$Date_Type == "contextual"],
res$Date_BC_AD_Stop[res$Date_Type == "contextual"],
function(x, y) { round(mean(x, y)) }
)
purrr::map2_int(
res$Date_BC_AD_Start[res$Date_Type == "contextual"],
res$Date_BC_AD_Stop[res$Date_Type == "contextual"],
function(x, y) { as.integer(round(mean(x, y))) }
)
purrr::map2(
res$Date_BC_AD_Start[res$Date_Type == "contextual"],
res$Date_BC_AD_Stop[res$Date_Type == "contextual"],
function(x, y) { as.integer(round(mean(x, y))) }
)
purrr::map2(
res$Date_BC_AD_Start[res$Date_Type == "contextual"],
res$Date_BC_AD_Stop[res$Date_Type == "contextual"],
function(x, y) { round(mean(x, y)) }
)
purrr::map2(
res$Date_BC_AD_Start[res$Date_Type == "contextual"],
res$Date_BC_AD_Stop[res$Date_Type == "contextual"],
function(x, y) { mean(x, y) }
)
res$Date_BC_AD_Start[res$Date_Type == "contextual"]
res$Date_BC_AD_Stop[res$Date_Type == "contextual"]
purrr::map2(
res$Date_BC_AD_Start[res$Date_Type == "contextual"],
res$Date_BC_AD_Stop[res$Date_Type == "contextual"],
function(x, y) { mean(c(x,y)) }
)
purrr::map2_int(
res$Date_BC_AD_Start[res$Date_Type == "contextual"],
res$Date_BC_AD_Stop[res$Date_Type == "contextual"],
function(x, y) { as.integer(mean(c(x,y))) }
)
res <- cbind(
age_string_split[2:4],
cal_res[1],
age_string_split[5:7]
)
res$Date_BC_AD_Start[res$Date_Type == "C14"] <- cal_res$Date_BC_AD_Start[res$Date_Type == "C14"]
res$Date_BC_AD_Stop[res$Date_Type == "C14"] <- cal_res$Date_BC_AD_Stop[res$Date_Type == "C14"]
res$Date_BC_AD_Median[res$Date_Type == "contextual"] <- purrr::map2_int(
res$Date_BC_AD_Start[res$Date_Type == "contextual"],
res$Date_BC_AD_Stop[res$Date_Type == "contextual"],
function(x, y) { as.integer(round(mean(c(x,y)))) }
)
res
readr::write_tsv(res, "~/agora/published_data/2019_Olalde_Iberia/dating.tsv", na = "n/a")
res <- cbind(
age_string_split[1:4],
cal_res[1],
age_string_split[5:7]
)
res$Date_BC_AD_Start[res$Date_Type == "C14"] <- cal_res$Date_BC_AD_Start[res$Date_Type == "C14"]
res$Date_BC_AD_Stop[res$Date_Type == "C14"] <- cal_res$Date_BC_AD_Stop[res$Date_Type == "C14"]
res$Date_BC_AD_Median[res$Date_Type == "contextual"] <- purrr::map2_int(
res$Date_BC_AD_Start[res$Date_Type == "contextual"],
res$Date_BC_AD_Stop[res$Date_Type == "contextual"],
function(x, y) { as.integer(round(mean(c(x,y)))) }
)
readr::write_tsv(res, "~/agora/published_data/2019_Olalde_Iberia/dating.tsv", na = "n/a")
